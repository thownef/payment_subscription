// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  refreshTokens RefreshToken[]
  Template      Template[]
  EmailSetting  EmailSetting[]
  Reservation   Reservation[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  isRevoked Boolean  @default(false) @map("is_revoked")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Upload {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  name      String
  url       String
  width     Int
  height    Int
  size      Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("uploads")
}

model Template {
  id             Int          @id @default(autoincrement())
  userId         Int          @map("user_id")
  emailSettingId Int?         @map("email_setting_id")
  name           String
  subject        String?
  block          Json?
  settingBlock   Json?        @map("setting_block")
  content        String       @db.LongText
  deliveryType   String @default("immediate") @map("delivery_type")
  scheduledAt    DateTime?    @map("scheduled_at")
  image          String
  isClickMeasure Boolean      @default(false) @map("is_click_measure")
  type           String       @default("template") @map("type")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailSetting EmailSetting? @relation(fields: [emailSettingId], references: [id], onDelete: Cascade)

  @@map("templates")
}

model EmailSetting {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  fromName    String   @map("from_name")
  fromAddress String   @map("from_address")
  username    String
  password    String
  host        String
  port        Int
  encryption  String
  cc          String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Template Template[]

  @@map("email_settings")
}

model Reservation {
  id             Int            @id @default(autoincrement())
  userId         Int            @map("user_id")
  emailSettingId Int            @map("email_setting_id")
  subject        String
  content        String         @db.LongText
  scheduledAt    DateTime?      @map("scheduled_at")
  deliveryType   String         @default("immediate") @map("delivery_type")
  deliveryStatus String         @default("pending") @map("delivery_status")
  isClickMeasure Boolean        @default(false) @map("is_click_measure")
  isSent         Boolean        @default(false) @map("is_sent")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reservations")
}
